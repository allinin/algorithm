责任链模式是一种行为型设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可以对请求进行处理，
或将其传递给链上的下个处理者。


责任链是一种行为设计模式，允许你将请求沿着处理者链进行发送，直至其中一个处理者对其进行处理。
该模式允许多个对象来对请求进行处理，而无需让发送者类与具体接收者类相耦合。链可在运行时由遵循标准处理者接口的任意处理者动态生成。


和许多其他行为设计模式一样，责任链会将特定行为转换为被称作处理者的独立对象上。
模式建议你将这些处理者连成一条链。链上大的每个处理者都有一个成员变量来保存对于下一个处理者的引用。除了处理请求外，
处理者还负责沿着链传递请求。请求会在链上移动，直至所有处理者的都有机会对其进行处理。

最重要的是：处理者可以决定不在沿着链传递请求，这可高效的的取消所有后续处理步骤。

还有一种稍微不同的方式(也是更经典的一种)，那就是处理者接收到请求后自行决定是否能够对其进行处理。如果自己能够处理，处理者就不再继续传递请求。
因此在这种情况下，每个请求要么最多有一个处理者对其进行处理，要么没有任何处理者对其进行处理。在处理图形用户界面元素栈中的事件时，这种方式非常常见。

所有处理者类实现同一个接口是关键所在。每个具体处理者仅关心下一个包含execute执行方法的处理者。这样一来，你就可以在运行时使用不同的处理者来创建链，
而无需将相关代码与处理者的具体类进行耦合。

================================
责任链模式结构：
1、处理者声明了所有具体处理者的通用接口。该接口通常仅包含的单个方法用于请求处理，但有时其还会包含一个设置链上下一个处理者的方法。
2、基础处理者是一个可选的类。你可以将所有处理者公用的样本代码放到这里。通常情况下，该类中定义了保存对于下一个处理者引用的成员变量。客户端
可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。该类还可以实现默认的处理行为：确定下一个处理者存在后再将请求传递给他。
3、具体处理者包含处理请求的实际代码。每个处理者接受到请求后，都必须决定是否进行处理，以及是否沿着链传递请求。处理者通常是独立且不可变的，需要通过
构造函数一次性的获得所有必要地数据
4、客户端可根据程序逻辑一次性或动态地生成链。值得注意的是，请求可发送给链上大的任意一个处理者，而非必须是第一个处理者。

==========================================
适合应用场景：
1、当程序需要使用不同方式处理不同种类请求，而且请求顺序和类型预先未知时，可以使用责任链模式。
该模式能将多个处理者连成一条链。收到请求后，他会询问每个处理者是否能够对其进行处理。这样所有处理者都有机会来处理请求。
2、当必须按顺序执行多个多个处理者时，可以使用模式。
无论你以何种顺序将处理者连接成一条链，所有请求都会严格按照顺序通过链上的处理者。
3、如果所需处理者及其顺序必须在运行时进行改变，可以使用责任链模式。
如果在处理者类中有对引用成员变量的设定方法，你将能动态的插入和移除处理者，或者改变其顺序。
=============================
实现方式：
1、声明处理者接口并描述请求处理方法的签名。
确定客户端如何将请求数据传递给方法。最灵活的方式是将请求转换为对象，然后将其以参数的形式传递给处理函数。
2、为了在具体处理者中消除重复代码，你可以根据处理者接口创建抽象处理者基类。
该类需要有一个成员变量来存储指向链上下一个处理者的引用。你可以将其设置为不可变类。但如果你打算在运行时对链进行改变，则需要定义一个设定方法来修改引用成员
变量的值。
为了使用方便，你还可以实现处理方法的默认行为。如果还有剩余对象，该方法会将请求传递给下一个对象。具体处理者话能够通过调用父对象大的方法来使用这一行为。
3、依次创建具体处理者子类并实现其处理方法。每个处理者在接收到请求后都必须做出两个决定：
(1)是否自行处理这个请求。
(2)是否将该请求沿着链进行传递。
4、客户端可以自行组装链，或者从其他对象处获得预先组装好的链。在后一种情况下，你必须实现工厂类以根据配置或环境设置来创建链。
5、客户端可以出发链中大的任意处理者，而不仅仅是第一个。请求将通过链进行传递，直至某个处理者拒绝继续传递，或者请求到达链尾。
6、由于链的动态性，客户端需要准备处理以下情况：
(1)链中可能只有单个链接
(2）部分请求可能无法到达链尾
(3)其他请求可能直到链尾都未被处理
=============================================================================
优点：
 你可以控制请求处理的顺序。
 单一职责原则。 你可对发起操作和执行操作的类进行解耦。
 开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者。
缺点：
 部分请求可能未被处理。
===============================================================================
 与其他模式的关系
 责任链模式、 命令模式、 中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：

 责任链按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。
 命令在发送者和请求者之间建立单向连接。
 中介者清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。
 观察者允许接收者动态地订阅或取消接收请求。
 责任链通常和组合模式结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。

 责任链的管理者可使用命令模式实现。 在这种情况下， 你可以对由请求代表的同一个上下文对象执行许多不同的操作。

 还有另外一种实现方式， 那就是请求自身就是一个命令对象。 在这种情况下， 你可以对由一系列不同上下文连接而成的链执行相同的操作。

 责任链和装饰模式的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。

 责任链的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 另一方面， 各种装饰可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。
 ==================================================
 在 Java 中使用模式

 使用示例： 责任链模式在 Java 程序中并不常见， 因为它仅在代码与对象链打交道时才能发挥作用。

 该模式最流行的使用案例之一是在 GUI 类中将事件向上传递给父组件。 另一个值得注意的使用案例是依次访问过滤器。

 下面是该模式在核心 Java 程序库中的一些示例：

 javax.servlet.Filter#doFilter()
 java.util.logging.Logger#log()
 识别方法：该模式可通过一组对象的行为方法间接调用其他对象的相同方法来识别， 而且所有对象都会遵循相同的接口。